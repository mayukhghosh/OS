import java.io.*;
import java.util.*;
public class Main {
	static Process[] processes;
	public static Process prc;//Current running process
	static int glob_time=0;//global cpu clock
	static int cpu_time=0;//current cpu burst left
	static int random_index=0;//tracking random number index for file
	static int algo;//current scheduling being used
	static ArrayList<Process> queue_list;//used for keeping track of processes which are ready at the same time
	static boolean verbose;
	static double glob_io_time;
	//1-FCFS,2-RR,3-SJF,4-HPRN
	public static void main(String[] args)throws Exception
	{
		/*String file_name;

		if(args.length==2)
		{
			verbose=true;
			file_name=args[1];
			System.out.println(file_name);
		}
		else
		{
			verbose=false;
			file_name=args[0];
		}
		for(int i=1;i<=4;i++)
		{
			input_parse_process(file_name);
			glob_time=0;
			cpu_time=0;
			random_index=0;
			glob_io_time=0;
			algo=i;
			scheduler();
			if(i==1)
			{
				System.out.println("The scheduling algorithm used was First Come First Serve");
			}
			if(i==2)
			{
				System.out.println("The scheduling algorithm used was Round Robin");
			}
			if(i==3)
			{
				System.out.println("The scheduling algorithm used was Shortest Job First");
			}
			if(i==4)
			{
				System.out.println("The scheduling algorithm used was Highest Priority Ratio Next");
			}
			System.out.println();
		}*/
		input_parse_process("input-4.txt");
		verbose=true;
		algo=3;
		scheduler();

	}
	
		
	
	public static void scheduler()throws Exception
	{

		int cycle=0;
			
		//print state before cycle 0
		if(verbose==true)
		{
			System.out.print("Before cycle \t0: \t");
			for(int i=0;i<processes.length;i++)
			{
				System.out.print(processes[i].state+"\t"+"0"+"\t");
			}
		}
		System.out.println();
		
		
		while(true)
		{
			for(int i=0;i<processes.length;i++)
			{
				if(processes[i].state.equals("blocked"))
				{
					glob_io_time++;
					break;
				}
			}
			queue_list=new ArrayList<Process>();
			if(algo==4)//Calculating T for HPRN
			{
				for(int i=0;i<processes.length;i++)
				{
					if(processes[i].state.equals("unstarted")==false && processes[i].state.equals("terminated")==false )
					{
						processes[i].T++;
					}
				}
			}
			
			blockedProcesses(cycle);
			runningProcesses(cycle);
			arrivingProcesses(cycle);
			readyProcesses(cycle);
			if(all_process_terminated())
			{
				break;
			}
			cycle++;
			glob_time++;
			if(verbose==true)
				print_cycle(cycle);
			
		}
		System.out.println();
		print_end_data(cycle);
		System.out.println();
		
	}
	
	public static void blockedProcesses(int cycle)
	{;
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("blocked") && processes[i].blocked_burst!=0)
			{
				processes[i].blocked_burst--;
				processes[i].io_time++;
			}
			if(processes[i].state.equals("blocked") && processes[i].blocked_burst==0)
			{
				processes[i].state="ready";
			}
			
		}
	}
	
	public static void runningProcesses(int cycle)throws Exception
	{
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("running"))
			{
				if(algo==1)//FCFS
				{
					FCFS.run(prc);
					cpu_time--;
					if(prc.c==0)
					{
						prc.state="terminated";
						prc.finish_time=glob_time;
					}
					if(cpu_time==0 && prc.c!=0)
					{
						prc.state="blocked";
					}
					break;
				}
				else if(algo==2)//RR
				{
					RR.run(prc);
					prc.cpu_left--;
					RR.decrease_qnt();
					if(prc.c==0)
					{
						prc.state="terminated";
						prc.finish_time=glob_time;
						break;
					}
					if(RR.curr_qnt==0 && prc.cpu_left!=0)//preempt
					{
						prc.state="ready";
						RR.reset_qnt();
						if(prc.in_queue==false)
						{
							//queue_list.add(prc);
							RR.enqueue(prc);
							prc.in_queue=true;
						}
					}
					if(prc.cpu_left==0 && prc.c!=0)
					{
						prc.state="blocked";
						RR.reset_qnt();
					}
				}
				if(algo==3)//SJF
				{
					SJF.run(prc);
					cpu_time--;
					if(prc.c==0)
					{
						prc.state="terminated";
						prc.finish_time=glob_time;
					}
					if(cpu_time==0 && prc.c!=0)
					{
						prc.state="blocked";
					}
					break;
				}
				if(algo==4)//HPRN
				{
					HPRN.run(prc);
					cpu_time--;
					prc.t++;
					if(prc.c==0)
					{
						prc.state="terminated";
						prc.finish_time=glob_time;
					}
					if(cpu_time==0 && prc.c!=0)
					{
						prc.state="blocked";
					}
					break;
				}
				
			}
			
		}
		
	}
	
	public static void arrivingProcesses(int cycle)
	{
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("unstarted"))
			{
				if(glob_time==processes[i].a)
				{
					processes[i].state="ready";
				}
			}
		}
	}
	
	public static void readyProcesses(int cycle)throws Exception
	{
		/*System.out.println("Before----");
		Iterator value=SJF.q.iterator();
		while(value.hasNext())
		{
			Process lc=(Process)value.next();
			System.out.println(lc.toString2());
		}*/
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("ready") && processes[i].in_queue==false)
			{
				if(algo==1)
				{
					FCFS.enqueue(processes[i]);
				}
				else if(algo==2)
				{
					//queue_list.add(processes[i]);
					//continue;
					RR.enqueue(processes[i]);
				}
				else if(algo==3)
				{
					Process lc=processes[i];
					SJF.enqueue(processes[i]);
				}
				else if(algo==4)
				{
					//queue_list.add(processes[i]);
					//continue;
					HPRN.enqueue(processes[i]);
				}
				processes[i].in_queue=true;
			}
		}
		/*System.out.println("After----");
		Iterator value1=SJF.q.iterator();
		while(value.hasNext())
		{
			Process lc=(Process)value1.next();
			System.out.println(lc.toString2());
		}*/
		
		int flag=0;
		for(int j=0;j<processes.length;j++)//check if any process is running
		{
			if(processes[j].state.equals("running"))
			{
				flag=1;
				break;
			}
		}
		
		boolean queue_has_element=true;
		if(algo==1)
			queue_has_element=FCFS.peek();
		else if(algo==2)
			queue_has_element=RR.peek();
		else if(algo==3)
		{
			queue_has_element=SJF.peek();
		}
		else if(algo==4)
			queue_has_element=HPRN.peek();
		
		if(flag==0 && queue_has_element==true)
		{
			if(algo==1)
			{
				prc=FCFS.dequeue();
				cpu_time=randomOS(prc.b);
				int io_time=cpu_time*prc.m;
				//prc.io_time=prc.io_time+io_time;
				prc.blocked_burst=io_time;
				prc.in_queue=false;
			}
			else if(algo==2)
			{
				prc=RR.dequeue();
				prc.in_queue=false;
				if(prc.cpu_left==0)
				{
					prc.cpu_left=randomOS(prc.b);
					int io_time=prc.cpu_left*prc.m;
					//prc.io_time=prc.io_time+io_time;
					prc.blocked_burst=io_time;
				}
			}
			if(algo==3)
			{
				prc=SJF.dequeue();
				cpu_time=randomOS(prc.b);
				int io_time=cpu_time*prc.m;
				//prc.io_time=prc.io_time+io_time;
				prc.blocked_burst=io_time;
				prc.in_queue=false;
			}
			if(algo==4)
			{
				prc=HPRN.dequeue();
				cpu_time=randomOS(prc.b);
				int io_time=cpu_time*prc.m;
				//prc.io_time=prc.io_time+io_time;
				prc.blocked_burst=io_time;
				prc.in_queue=false;
			}
			prc.state="running";
			flag=1;
		}
		
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("ready") && flag==1)
			{
				processes[i].wait_time++;
			}
		}
	
	}
	
	public static int randomOS(int b)throws Exception
	{
		int count=0;
		File file = new File("random-numbers.txt"); 
	    Scanner sc = new Scanner(file);
	    while(sc.hasNext())
	    {
	    	sc.next();
	    	count++;
	    }
	    int[] numbers=new int[count];
	    sc = new Scanner(file);
	    int i=0;
	    while(i<count)
	    {
	    	numbers[i]=sc.nextInt();
	    	i++;
	    }
	    int random=1+(numbers[random_index] % b);
	    random_index++;
	    if(verbose==true)
	    	System.out.println("Random: "+random);
	    return random;
	}

	public static void input_parse_process(String str_file)throws Exception
	{
		File file = new File(str_file); 
	    Scanner sc = new Scanner(file);
	    //String input=sc.nextLine();
	    int n=sc.nextInt();
	    processes=new Process[n];
	    for(int i=0;i<n;i++)
	    {
	    	int a=sc.nextInt();
	    	int b=sc.nextInt();
	    	int c=sc.nextInt();
	    	int m=sc.nextInt();
	    	processes[i]=new Process(a,c,b,m);
	    }
	    Arrays.sort(processes,Process.ArrivalComparator);
	    for(int i=0;i<n;i++)
	    {
	    	processes[i].position=i;
	    }
	    System.out.println(Arrays.toString(processes));
	}

	public static boolean all_process_terminated()
	{
		for(int i=0;i<processes.length;i++)
		{
			if(processes[i].state.equals("terminated")==false)
			{
				return false;
			}
		}
		return true;
	}
	
	public static void print_end_data(int cycle)
	{
		for(int i=0;i<processes.length;i++)
		{
			System.out.println("Process "+(i+1)+":");
			System.out.println("(A,B,C,M) = "+processes[i].toString1());
			System.out.println("Finishing time: "+processes[i].finish_time);
			System.out.println("Turnaround time: "+(processes[i].finish_time-processes[i].a));
			System.out.println("I/O time: "+processes[i].io_time);
			System.out.println("Waiting time: "+processes[i].wait_time);
			System.out.println();
		}
		
		double cpu_util=0;
		double io_util=0;
		double avg_turnaround=0;
		double avg_wait=0;
		double throughput=0;
		for(int i=0;i<processes.length;i++)
		{
			//cpu_util=cpu_util+(processes[i].x/processes[i].finish_time);
			cpu_util=cpu_util+(processes[i].x);
			//io_util=io_util+(processes[i].io_time/processes[i].finish_time);
			avg_turnaround=avg_turnaround+(processes[i].finish_time-processes[i].a);
			avg_wait=avg_wait+processes[i].wait_time;
		}
		cpu_util=cpu_util/cycle;
		io_util=glob_io_time/cycle;
		throughput=((double)processes.length/(double)cycle)*100.0;
		avg_turnaround=avg_turnaround/processes.length;
		avg_wait=avg_wait/processes.length;
		
		//System.out.println("glob_io "+glob_io_time);
		System.out.println("Summary Data:");
	
		System.out.println("Finishing time: "+cycle);
		System.out.println("CPU Utilization: "+cpu_util);
		System.out.println("I/O Utilization: "+io_util);
		System.out.println("Throughput: "+throughput+" processes per hundred cycles");
		System.out.println("Average turnaround time: "+avg_turnaround);
		System.out.println("Average waiting time: "+avg_wait);
			
	
		
	}
	public static void print_cycle(int cycle)
	{
		System.out.print("Before cycle \t"+ cycle+":\t");
		int time=0;
		if(algo==1 || algo==3 || algo==4)
			time=cpu_time;
		else if(algo==2)
		{
			time=Math.min(prc.cpu_left,RR.curr_qnt);
			if(time<0)
				time=prc.cpu_left;
		}
		for(int i=0;i<processes.length;i++)
		{
			
			if(processes[i].state.equals("running"))
				System.out.print(processes[i].state+"\t"+time+"\t");
			if(processes[i].state.equals("blocked"))
				System.out.print(processes[i].state+"\t"+processes[i].blocked_burst+"\t");
			if(processes[i].state.equals("unstarted"))
				System.out.print(processes[i].state+"\t"+"0"+"\t");
			if(processes[i].state.equals("terminated"))
				System.out.print(processes[i].state+"\t"+"0"+"\t");
			if(processes[i].state.equals("ready"))
				System.out.print(processes[i].state+"\t"+"0"+"\t");
		}
		System.out.println();
	}
}
